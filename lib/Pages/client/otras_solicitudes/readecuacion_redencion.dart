import 'dart:math';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import '../../../commons/wompi/checkout_page.dart';
import '../../../services/resumen_solicitudes_service.dart';
import '../../../src/colors/colors.dart';
import '../solicitud_exitosa_readecuacion/solicitud_exitosa_readecuacion.dart';

class SolicitudReadecuacionRedencionPage extends StatefulWidget {
  const SolicitudReadecuacionRedencionPage({Key? key}) : super(key: key);

  @override
  State<SolicitudReadecuacionRedencionPage> createState() => _SolicitudReadecuacionRedencionPageState();
}

class _SolicitudReadecuacionRedencionPageState extends State<SolicitudReadecuacionRedencionPage> {
  @override
  Widget build(BuildContext context) {
    const TextStyle textoNormal = TextStyle(fontSize: 14, height: 1.5, color: Colors.black);
    const TextStyle textoNegrilla = TextStyle(fontSize: 14, height: 1.5, fontWeight: FontWeight.bold, color: Colors.black);
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text('Solicitud Readecuaci√≥n Redenci√≥n', style: TextStyle(color: Colors.white)),
        backgroundColor: primary,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: ConstrainedBox(
              constraints: const BoxConstraints(maxWidth: 600),
              child: ListView(
                padding: const EdgeInsets.all(16),
                children: [
                  const Text(
                    'üìò Redenci√≥n de pena y aplicaci√≥n del Art√≠culo 19 de la Reforma Laboral',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),

                  const Text(
                    'La redenci√≥n de pena es un mecanismo legal mediante el cual las personas privadas de la libertad pueden reducir su condena a trav√©s de trabajo certificado. Este proceso forma parte integral del camino hacia la resocializaci√≥n y reintegraci√≥n social.',
                    textAlign: TextAlign.justify,
                    style: textoNormal,
                  ),
                  const SizedBox(height: 10),

                  RichText(
                    textAlign: TextAlign.justify,
                    text: const TextSpan(
                      style: textoNormal,
                      children: [
                        TextSpan(text: 'Con la entrada en vigor del '),
                        TextSpan(text: 'Art√≠culo 19 de la Ley 2466 de 2025', style: textoNegrilla),
                        TextSpan(text: ', como parte de la Reforma Laboral en Colombia, se introdujo un nuevo esquema m√°s favorable para las redenciones: por cada '),
                        TextSpan(text: 'tres (3) d√≠as de trabajo', style: textoNegrilla),
                        TextSpan(text: ', se redimen '),
                        TextSpan(text: 'dos (2) d√≠as de pena', style: textoNegrilla),
                        TextSpan(text: '.'),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10),

                  RichText(
                    textAlign: TextAlign.justify,
                    text: const TextSpan(
                      style: textoNormal,
                      children: [
                        TextSpan(text: 'Adem√°s, esta norma reconoce estas actividades como '),
                        TextSpan(text: 'experiencia laboral v√°lida', style: textoNegrilla),
                        TextSpan(text: ', siempre que sean certificadas por el INPEC o las autoridades penitenciarias. Esto potencia las oportunidades de reintegraci√≥n laboral al recuperar la libertad.'),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10),

                  RichText(
                    textAlign: TextAlign.justify,
                    text: const TextSpan(
                      style: textoNormal,
                      children: [
                        TextSpan(text: '‚ö†Ô∏è '),
                        TextSpan(text: 'Importante: ', style: textoNegrilla),
                        TextSpan(text: 'Este nuevo esquema de redenci√≥n '),
                        TextSpan(text: 'no se aplica autom√°ticamente', style: textoNegrilla),
                        TextSpan(text: '. Para que sea reconocido y aplicado por las autoridades judiciales, es necesario solicitarlo formalmente al juzgado que est√© conociendo el caso, argumentando el principio de '),
                        TextSpan(text: 'favorabilidad penal', style: textoNegrilla),
                        TextSpan(text: ', contemplado en el art√≠culo 29 de la Constituci√≥n Pol√≠tica.'),
                      ],
                    ),
                  ),
                  const SizedBox(height: 20),

                  const Text('üìå Fundamento legal actualizado:', style: textoNegrilla),
                  const SizedBox(height: 6),
                  const Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '‚Ä¢ Art√≠culo 19, Ley 2466 de 2025 (Reforma Laboral)',
                        textAlign: TextAlign.justify,
                        style: textoNormal,
                      ),
                      SizedBox(height: 6),
                      Text(
                        '‚Ä¢ Art√≠culo 141, Ley 65 de 1993 (C√≥digo Penitenciario y Carcelario)',
                        textAlign: TextAlign.justify,
                        style: textoNormal,
                      ),
                      SizedBox(height: 6),
                      Text(
                        '‚Ä¢ Art√≠culo 147, Ley 65 de 1993',
                        textAlign: TextAlign.justify,
                        style: textoNormal,
                      ),
                      SizedBox(height: 6),
                      Text(
                        '‚Ä¢ Art√≠culo 29, Constituci√≥n Pol√≠tica de Colombia (principio de favorabilidad)',
                        textAlign: TextAlign.justify,
                        style: textoNormal,
                      ),
                      SizedBox(height: 6),
                      Text(
                        '‚Ä¢ Jurisprudencia de la Corte Suprema de Justicia (Rad. No. 39257)',
                        textAlign: TextAlign.justify,
                        style: textoNormal,
                      ),
                    ],
                  ),
                  const SizedBox(height: 20),

                  const Divider(height: 1, color: gris),
                  const SizedBox(height: 20),

                  const Text(
                    'Solicitar aplicaci√≥n del Art√≠culo 19 por favorabilidad',
                    style: TextStyle(color: negro, fontWeight: FontWeight.w900, fontSize: 18),
                  ),
                  const SizedBox(height: 20),

                  const Text(
                    'Se invita a la persona privada de la libertad a solicitar formalmente ante el juzgado la aplicaci√≥n del nuevo esquema de redenci√≥n previsto en la Ley 2466 de 2025.',
                    textAlign: TextAlign.justify,
                    style: textoNormal,
                  ),
                  const SizedBox(height: 40),

                  const Text(
                    'üìä Ejemplo pr√°ctico de redenci√≥n de pena:',
                    style: textoNegrilla,
                  ),
                  const SizedBox(height: 6),
                  Table(
                    border: TableBorder.all(color: Colors.grey),
                    defaultVerticalAlignment: TableCellVerticalAlignment.middle,
                    columnWidths: const {
                      0: FlexColumnWidth(2),
                      1: FlexColumnWidth(2),
                      2: FlexColumnWidth(2),
                    },
                    children: [
                      TableRow(
                        decoration: BoxDecoration(color: Colors.grey.shade300),
                        children: const [
                          Padding(
                            padding: EdgeInsets.all(8.0),
                            child: Text('D√≠as de trabajo', style: textoNegrilla, textAlign: TextAlign.center),
                          ),
                          Padding(
                            padding: EdgeInsets.all(8.0),
                            child: Text('Redenci√≥n anterior (Ley 65/93)', style: textoNegrilla, textAlign: TextAlign.center),
                          ),
                          Padding(
                            padding: EdgeInsets.all(8.0),
                            child: Text('Redenci√≥n actual (Ley 2466/25)', style: textoNegrilla, textAlign: TextAlign.center),
                          ),
                        ],
                      ),
                      const TableRow(children: [
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('30 d√≠as'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('15 d√≠as redimidos'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('20 d√≠as redimidos'),
                        ),
                      ]),
                      const TableRow(children: [
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('60 d√≠as'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('30 d√≠as redimidos'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('40 d√≠as redimidos'),
                        ),
                      ]),
                      const TableRow(children: [
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('90 d√≠as'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('45 d√≠as redimidos'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('60 d√≠as redimidos'),
                        ),
                      ]),
                      const TableRow(children: [
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('180 d√≠as'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('90 d√≠as redimidos'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('120 d√≠as redimidos'),
                        ),
                      ]),
                      const TableRow(children: [
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('360 d√≠as'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('180 d√≠as redimidos'),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('240 d√≠as redimidos'),
                        ),
                      ]),
                    ],
                  ),
                  const SizedBox(height: 20),
                  const Text(
                    'üßë‚Äç‚öñÔ∏è ¬øQu√© debe hacer el juez?',
                    style: TextStyle(color: negro, fontWeight: FontWeight.w900, fontSize: 18),
                  ),
                  const SizedBox(height: 10),
                  const Text(
                    'El juez de ejecuci√≥n de penas y medidas de seguridad, al momento de estudiar una solicitud de redenci√≥n de pena, debe aplicar el principio de favorabilidad penal. '
                        'Esto significa que, si una persona privada de la libertad acumul√≥ d√≠as de trabajo bajo el antiguo esquema (Ley 65 de 1993), el juez debe evaluar si aplicar el nuevo beneficio establecido en el Art√≠culo 19 de la Ley 2466 de 2025 resulta m√°s favorable.',
                    textAlign: TextAlign.justify,
                    style: textoNormal,
                  ),
                  const SizedBox(height: 10),
                  const Text(
                    'En estos casos, el juez puede recalcular la redenci√≥n con base en el nuevo sistema (3x2), lo cual puede aumentar significativamente los d√≠as redimidos. Esta revisi√≥n no ocurre de forma autom√°tica, '
                        'por lo que es fundamental que la persona privada de la libertad o su acudiente soliciten expresamente la aplicaci√≥n del nuevo esquema legal de redenci√≥n.',
                    textAlign: TextAlign.justify,
                    style: textoNormal,
                  ),
                  const SizedBox(height: 10),
                  const Text(
                    '‚öñÔ∏è El principio de favorabilidad est√° consagrado en el art√≠culo 29 de la Constituci√≥n Pol√≠tica y en el art√≠culo 6¬∫ del C√≥digo Penal, y exige que siempre se aplique la norma m√°s benigna al condenado. '
                        'Por tanto, el juez tiene la obligaci√≥n de preferir la nueva ley si esta genera un mayor beneficio para el solicitante.',
                    textAlign: TextAlign.justify,
                    style: textoNormal,
                  ),
                  const SizedBox(height: 20),

                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: primary,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                    ),
                    onPressed: () async {
                      final confirmacion = await showDialog<bool>(
                        context: context,
                        builder: (context) => AlertDialog(
                          backgroundColor: blanco,
                          title: const Text('Confirmar env√≠o'),
                          content: const Text('¬øEst√°s seguro de que deseas solicitar la aplicaci√≥n del Art√≠culo 19 de la ley 2466 de 2025, por favorabilidad para la redenci√≥n de penas?'),
                          actions: [
                            TextButton(
                              onPressed: () => Navigator.pop(context, false),
                              child: const Text('Cancelar'),
                            ),
                            ElevatedButton(
                              style: ElevatedButton.styleFrom(backgroundColor: primary),
                              onPressed: () => Navigator.pop(context, true),
                              child: const Text('Enviar', style: TextStyle(color: blanco)),
                            ),
                          ],
                        ),
                      );

                      if (confirmacion == true) {
                        await verificarSaldoYEnviarSolicitud(); // Llama a tu funci√≥n de env√≠o
                      }
                    },
                    child: const Text('Solicitar ahora', style: TextStyle(color: Colors.white, fontSize: 16)),
                  ),
                  const SizedBox(height: 50),
                ],
              ),
            ),
          ),
        )

    );
  }

  Future<void> verificarSaldoYEnviarSolicitud() async {
    final configSnapshot = await FirebaseFirestore.instance.collection('configuraciones').limit(1).get();
    final double valorReadecuacion = (configSnapshot.docs.first.data()['valor_readecuacion'] ?? 0).toDouble();

    final uid = FirebaseAuth.instance.currentUser?.uid;
    if (uid == null) return;

    final userDoc = await FirebaseFirestore.instance.collection('Ppl').doc(uid).get();
    final double saldo = (userDoc.data()?['saldo'] ?? 0).toDouble();

    if (saldo >= valorReadecuacion) {
      await enviarSolicitudReadecuacion(valorReadecuacion); // ‚úÖ Ya no descontamos aqu√≠
    } else {
      if (!context.mounted) return;
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          backgroundColor: blanco,
          title: const Text("Pago requerido"),
          content: const Text("Para enviar esta solicitud debes realizar el pago del servicio."),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text("Cancelar")),
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => CheckoutPage(
                      tipoPago: 'readecuacion',
                      valor: valorReadecuacion.toInt(),
                      onTransaccionAprobada: () async {
                        await enviarSolicitudReadecuacion(valorReadecuacion); // ‚úÖ Se ejecuta con saldo actualizado
                      },
                    ),
                  ),
                );
              },
              child: const Text("Pagar"),
            ),
          ],
        ),
      );
    }
  }

  Future<void> enviarSolicitudReadecuacion(double valor) async {
    User? user = FirebaseAuth.instance.currentUser;
    if (user == null || !context.mounted) return;

    // ‚úÖ Descontar antes de continuar
    await descontarSaldo(valor);

    if(context.mounted){
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const AlertDialog(
          backgroundColor: blancoCards,
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 10),
              Text("Enviando solicitud..."),
            ],
          ),
        ),
      );
    }

    try {
      FirebaseFirestore firestore = FirebaseFirestore.instance;
      String docId = firestore.collection('readecuacion_solicitados').doc().id;
      String numeroSeguimiento = (Random().nextInt(900000000) + 100000000).toString();

      final pplDoc = await firestore.collection('Ppl').doc(user.uid).get();
      final data = pplDoc.data();
      final nombrePpl = (data?['nombre_ppl'] ?? '').toString();
      final apellidoPpl = (data?['apellido_ppl'] ?? '').toString();

      await firestore.collection('readecuacion_solicitados').doc(docId).set({
        'id': docId,
        'idUser': user.uid,
        'numero_seguimiento': numeroSeguimiento,
        'fecha': FieldValue.serverTimestamp(),
        'status': 'Solicitado',
      });

      await ResumenSolicitudesService.guardarResumen(
        idUser: user.uid,
        nombrePpl: '$nombrePpl $apellidoPpl',
        tipo: "Solicitd readecuacion",
        numeroSeguimiento: numeroSeguimiento,
        status: "Solicitado",
        idOriginal: docId,
        origen: "readecuacion_solicitados",
        fecha: Timestamp.now(),
      );

      if (context.mounted) {
        Navigator.pop(context);
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => SolicitudExitosaReadecuacionRedencionPage(
              numeroSeguimiento: numeroSeguimiento,
            ),
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        Navigator.pop(context);
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text("Error"),
            content: const Text("Hubo un problema al guardar la solicitud."),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text("Aceptar"),
              ),
            ],
          ),
        );
      }
    }
  }

  Future<void> descontarSaldo(double valor) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final docRef = FirebaseFirestore.instance.collection('Ppl').doc(user.uid);
    final snapshot = await docRef.get();

    if (snapshot.exists) {
      final datos = snapshot.data();
      final double saldoActual = (datos?['saldo'] ?? 0).toDouble();
      final double nuevoSaldo = saldoActual - valor;

      if (nuevoSaldo >= 0) {
        await docRef.update({'saldo': nuevoSaldo});
      } else {
        debugPrint('‚ö†Ô∏è Saldo insuficiente, no se pudo descontar');
      }
    }
  }
}
